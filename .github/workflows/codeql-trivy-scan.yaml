name: CodeQL/Trivy Scan

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
        description: 'Programming language to analyze (eg: java or javascript)'
      image-suffix:
        required: false
        type: string
        default: ''
        description: 'Optional suffix to append to the image name (no leading dash).'

env:
  PROD_IMAGE: ${{ format('{0}{1}', github.event.repository.name, inputs.image-suffix != '' && format('-{0}', inputs.image-suffix) || '') }}
  TRIVY_JAVA_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-java-db:1"
  TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db"

jobs:
  security-scan-codeql-trivy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: ${{ inputs.language }}

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false

      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

      - name: Login to Google Artifact Registry
        uses: nais/login@v0
        id: login
        with:
          team: okonomi

      - name: Inspect ${{ env.PROD_IMAGE }} details
        run: |
          IMAGE_REF="${{ steps.login.outputs.registry }}/${{ env.PROD_IMAGE }}"
          echo "Pulling image: $IMAGE_REF"
          docker pull "$IMAGE_REF"

          echo ""
          echo "=== Image Information ==="
          docker images --format "Repository: {{.Repository}}" | grep "${{ env.PROD_IMAGE }}"
          docker images --format "Tag: {{.Tag}}" | grep -A1 "${{ env.PROD_IMAGE }}" | tail -1
          docker images --format "Image ID: {{.ID}}" | grep -A1 "${{ env.PROD_IMAGE }}" | tail -1
          docker images --format "Created: {{.CreatedAt}}" | grep -A1 "${{ env.PROD_IMAGE }}" | tail -1
          docker images --format "Size: {{.Size}}" | grep -A1 "${{ env.PROD_IMAGE }}" | tail -1
          echo ""

          echo "=== Image Labels and Metadata ==="
          docker inspect "$IMAGE_REF" --format='{{json .Config.Labels}}' | jq '.'

      - name: Run Trivy vulnerability scanner on docker image ${{ env.PROD_IMAGE }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login.outputs.registry }}/${{ env.PROD_IMAGE }}
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
