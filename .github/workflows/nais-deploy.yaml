name: Deploy application

on:
  workflow_call:
    inputs:
      cluster:
        required: true
        type: string
        description: NAIS cluster to deploy to
      resource:
        required: true
        type: string
        description: NAIS resource to use for deployment
      image:
        required: true
        type: string
        description: Docker image to deploy

jobs:
  deploy-application:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # ratchet:actions/checkout@v5
        with:
          persist-credentials: false

      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # ratchet:actions/github-script@v7
        with:
          script: "const deployment = await github.rest.repos.createDeployment({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  ref: context.ref,\n  environment: '${{ inputs.cluster }}',\n  auto_merge: false,\n  required_contexts: []\n});\nreturn deployment.data.id;    \n"
      - name: Deploy to Environment
        uses: nais/deploy/actions/deploy@961addd1e4d4211f1a7333ada5fde85f7c9aa5b7 # ratchet:nais/deploy/actions/deploy@v2
        env:
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ${{ inputs.resource }}
          IMAGE: ${{ inputs.image }}
          TIMEOUT: 10m
          PRINT_PAYLOAD: true
      - name: Update Deployment Status

        if: always()
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # ratchet:actions/github-script@v7
        with:
          script: "const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';\nawait github.rest.repos.createDeploymentStatus({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  deployment_id: ${{ steps.deployment.outputs.result }},\n  state: state,\n  log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n});    \n"
      - name: Find and Comment on PR
        if: always()
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # ratchet:actions/github-script@v7
        with:

          script: "const status = '${{ job.status }}';\nconst emoji = status === 'success' ? '🚀' : '❌';\nconst message = status === 'success' \n  ? `${emoji} Successfully deployed to **${{ inputs.cluster }}**`\n  : `${emoji} Deployment to **${{ inputs.cluster }}** failed`;\n\nconst { data: pullRequests } = await github.rest.repos.listPullRequestsAssociatedWithCommit({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  commit_sha: context.sha\n});\n\nif (pullRequests.length > 0) {\n  const pr = pullRequests[0];\n  await github.rest.issues.createComment({\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    issue_number: pr.number,\n    body: `${message}\\n📦 Image: \\`${{ inputs.image }}\\`\\n👷 Deployed by: @${{ github.triggering_actor }}`\n  });\n}    "






































